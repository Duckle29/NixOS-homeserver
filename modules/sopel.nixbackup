{ config, lib, pkgs, ...}:

with lib;

let
  cfg = config.services.sopel;
  name = "SopelIRC";
  configFile = pkgs.writeText "sopel.conf" ''
    [core] 
    nick = ${cfg.nick}
    host = ${cfg.host}
    use_ssl = ${cfg.useSSL}
    port = ${cfg.port}
    owner = ${cfg.owner}
    prefix = ${cfg.prefix}
    channels = ${lib.strings.concatMapStrings (x: "\"" + x + "\"\n") cfg.channels}
    nick_blocks = ${lib.strings.concatLines cfg.nickBlocks}
  '';

  botSettings = mkMerge [
    {
      core = {
        nick = cfg.nick;
        host = cfg.host;
        use_ssl = cfg.useSSL;
        port = cfg.port;
        owner = cfg.owner;
        channels = lib.strings.concatMapStrings (x: "\"" + x + "\"\n") cfg.channels;
        prefix = cfg.prefix;
        enable = lib.strings.concatLines cfg.plugins;
        nick_blocks = lib.strings.concatLines cfg.nickBlocks;
        auth_method = cfg.authMethod;
        auth_username = cfg.authUser;
        auth_password = cfg.authPassword;
      };
    };
    cfg.extraSettings;
  ];
  botSettings = filterAttrsRecursive (n: v: v != null) botSettings;


in
{
  options = {
    services.sopel = {
      enable = mkEnableOption name;
      
      port = mkOption {
        type = types.port;
        default = 6697;
        description = "The port to connect to IRC on";
      };

      owner = mkOption {
        type = types.str;
        default = "";
        description = "The nick of the owner of the bot";
      };

      nick = mkOption {
        type = types.str;
        default = "SopelBot";
        description = "The nickname of the bot";
      };

      host = mkOption {
        type = types.str;
        default = "irc.libera.chat";
        description = "The IRC network to connect to";
      };

      useSSL = mkOption {
        type = types.bool;
        default = true;
        description = "Whether or not to use SSL";
      };

      channels = mkOption {
        type = types.listOf types.str;
        default = [];
        example = [ "#sopel" "#sopelunkers isP@ssw0rded"];
        description = "List of channels the bot should join. Optionally with passwords";
      };

      prefix = mkOption {
        type = types.str;
        default = "\\.";
        description = ''
          The regex pattern the bot looks for before commands.
          Regex characters have to be escaped.
        '';
      };

      plugins = mkOption {
        type = types.listOf types.str;
        default = null;
        example = [ "help", "admin" ];
        description = ''
          Plugins to enable for the bot.
          If left empty, all plugins will be enabled.
        '';
      };

      nickBlocks = mkOption {
        type = types.listOf types.str;
        default = [];
        example = [ "other_bot1" ".*bot.*" ];
        description = ''
          A list of nicks to ignore any messages from. Commonly used to ignore other bots.
          Regex is supported, so remember to escape regex characters if applicable.
          '';
      };

      extraSettingsFile = mkOption {
        type = types.nullOr types.path;
        default = null;
        description = ''
          File which is dynamically applied to the configuration file before starting the bot.
          This file will be appended to the end of the configuration generated by this module. 
          This module only generates contents under the [core] section, so this extra file
          can be used to add more settings to core, or to add plugin configurations.
        ''
      };
      
      authUser = mkOption {
        type = types.str;
        default = "";
        description = ''
          The user used for authenticating the bot.
          To avoid leaking credentials, you can set this in the
          extraSettingsFile file.
          '';
      };
      
      authPass = mkOption {
        type = types.str;
        default = "";
        description = ''
          The password used to authenticate the bot.
          To avoid leaking credentials, you can set this in the
          extraSettingsFile;
        '';
      
      authMethod = mkOption {
        type = types.str;
        default = "sasl";
        description = ''
          The simple method to authenticate with the server.
          See https://sopel.chat/docs/package/config/core_section#sopel.config.core_section.CoreSection.auth_method
        ''
      };
    };
  };

  environment.systemPackages = with pkgs; [ python312Packages.sopel ]
  systemd.services.sopel = {
    description	= "Sopel IRC bot";
    wantedBy	= [ "multi-user.target" ];
    after	= [ "network.target" ];

    serviceConfig = {
      Restart = "on-failure"
      type = "simple"
      ExecStart = ''
        ${cfg.package}/bin/sopel -c ${}
      '';
      
            
    };
  };
};
